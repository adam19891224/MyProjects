<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/aop
               			http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<!-- 启动对@AspectJ注解的支持 在调用Controller的时候AOP发挥作用所以在SpringMVC的配置文件里加上 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/> 
	<!--
		通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller，
		注意和上面仅仅只是开启aspectj的配置做区分，这里如果要开启cglib，则需要在后面
		在配置一个 proxy-target-class="true"，经验证，这里并不需要cglib代理，
		而且spring也建议我们优先采用jdk的动态代理技术
	-->  
	<!-- <aop:aspectj-autoproxy proxy-target-class="true" />   -->

	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.web">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />  
	</context:component-scan>
	
	<!-- 加载日志切面对象 -->
	<bean class="com.system.aop.LogsAspect" />
	
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置解决spring mvc resopnseBody时，返回多一对引号的问题 -->
	<bean id="messageAdapter" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- Support JSON -->
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
				<bean class="org.springframework.http.converter.StringHttpMessageConverter" />
				<ref bean="mappingJacksonHttpMessageConverter" /><!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean>

	<!--开启拦截器handler-->
	<bean name='handlerMapping' class='org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping' >
		<property name="useSuffixPatternMatch" value="false" />
		<property name="useTrailingSlashMatch" value="true" />
	</bean>

	<!-- 注册拦截器 -->
	<mvc:interceptors>
		<!-- 配置Token拦截器，防止用户重复提交数据 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.system.interceptors.RepeatSubmitInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>

</beans>